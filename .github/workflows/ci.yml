name: Build with nexe (Windows)

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. リポジトリチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js セットアップ + npm キャッシュ
      - name: Set up Node.js and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      # 3. 依存関係を再インストール（adm-zip → unzipper に置き換え）
      - name: Install npm dependencies
        run: npm ci --force

      - name: Execute bundle.js
        run: node bundle.js

      - name: Create blob.blob
        run: node --experimental-sea-config sea-config.json

      - name: Inject Node.js
        run: node -e "require('fs').copyFileSync(process.execPath, 'dist/ppSend.exe')"

      - name: Inject app
        run: npx postject dist/ppSend.exe NODE_SEA_BLOB dist/blob.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

      # 6. ビルド成果物アップロード
      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ppSend-exe
          path: dist/ppSend.exe

  run:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download built binary
        uses: actions/download-artifact@v4
        with:
          name: ppSend-exe

      - name: Create .env file
        run: |
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" > .env
          echo "WS_URL=ws://127.0.0.1:24050/websocket/v2" >> $GITHUB_ENV

      - name: Run exe with timeout
        shell: pwsh
        run: |
          $env:DISCORD_WEBHOOK = "${{ secrets.DISCORD_WEBHOOK }}"
          $env:WS_URL = "ws://127.0.0.1:24050/websocket/v2"
          $proc = Start-Process -FilePath "./ppSend.exe" -PassThru `
                                -RedirectStandardOutput "stdout.log" `
                                -RedirectStandardError "stderr.log"

          $waitTime = 60000
          $proc.WaitForExit($waitTime)

          if (-not $proc.HasExited) {
              Write-Host "Timeout reached, process still running. Killing..."
              $proc.Kill()
              Write-Host "Timeout finished — considered normal exit"
              exit 0
          }

          Write-Host "Process finished. Exit code: $($proc.ExitCode)"
          Get-Content stdout.log
          Get-Content stderr.log

          if ($proc.ExitCode -ne 0) {
              Write-Host "Process exited with error"
              exit 1
          }