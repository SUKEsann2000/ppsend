name: Build

on:
  push:
    branches: [main]

jobs:
  linux-run-directly:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute
        shell: bash
        run: |
          set +e
          timeout 30s npm run start -- --ppSendDebug
          exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "Timeout reached (30s), treating as success."
            exit 0
          fi
          exit $exit_code

  linux-build:
    runs-on: ubuntu-latest
    needs: linux-run-directly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute bundler.js
        run: node bundler.js

      - name: Create blob.blob
        run: node --experimental-sea-config sea-config.json

      - name: Inject Node.js
        run: node -e "require('fs').copyFileSync(process.execPath, 'dist/ppSend')"

      - name: Inject app
        run: npx postject dist/ppSend NODE_SEA_BLOB dist/blob.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ppSend-Linux
          path: dist/ppSend

  linux-run:
    needs: linux-build
    runs-on: ubuntu-latest

    steps:
      - name: Download built binary
        uses: actions/download-artifact@v4
        with:
          name: ppSend-Linux

      - name: Run binary with timeout
        shell: bash
        run: |
          chmod +x ./ppSend
          set +e
          timeout 60s ./ppSend --ppSendDebug
          exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "Timeout reached (60s), treating as success."
            exit 0
          fi
          exit $exit_code

  windows-run-directly:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute
        shell: pwsh
        run: |
          ./.github/scripts/run_directly.ps1

  windows-build:
    runs-on: windows-latest
    needs: windows-run-directly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Execute bundler.js
        run: node bundler.js

      - name: Create blob.blob
        run: node --experimental-sea-config sea-config.json

      - name: Inject Node.js
        run: node -e "require('fs').copyFileSync(process.execPath, 'dist/ppSend.exe')"

      - name: Inject app
        run: npx postject dist/ppSend.exe NODE_SEA_BLOB dist/blob.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ppSend-Windows
          path: dist/ppSend.exe

  windows-run:
    needs: windows-build
    runs-on: windows-latest
    steps:
      - name: Download built binary
        uses: actions/download-artifact@v4
        with:
          name: ppSend-Windows

      - name: Run exe with timeout
        shell: pwsh
        run: |
          $proc = Start-Process -FilePath "./ppSend.exe" -ArgumentList "--ppSendDebug" -PassThru `
                                -RedirectStandardOutput "stdout.log" `
                                -RedirectStandardError "stderr.log" `
                                -WorkingDirectory "$PWD"

          $waitTime = 60000
          $proc.WaitForExit($waitTime)

          if (-not $proc.HasExited) {
              Write-Host "Timeout reached, process still running. Killing..."
              $proc.Kill()
              Write-Host "Timeout finished â€” considered normal exit"
              exit 0
          }

          Write-Host "Process finished. Exit code: $($proc.ExitCode)"
          Get-Content stdout.log
          Get-Content stderr.log

          if ($proc.ExitCode -ne 0) {
              Write-Host "Process exited with error"
              exit 1
          }